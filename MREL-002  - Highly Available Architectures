# Define the AWS provider configuration
provider "aws" {
  region = "eu-west-1"  
}

# Create an Amazon Route 53 hosted zone for your domain
resource "aws_route53_zone" "example_zone" {
  name = "example.com"
}

# Define an Amazon EKS cluster
module "eks_cluster" {
  source           = "terraform-aws-modules/eks/aws"
  cluster_name     = "my-eks-cluster"
  cluster_version  = "1.21"
  subnets          = aws_subnet.eks_subnets[*].id
  vpc_id           = aws_vpc.eks_vpc.id
  worker_groups    = {
    eks_nodes = {
      desired_capacity = 3  # Number of worker nodes in each AZ
      max_capacity     = 3
      min_capacity     = 1
    }
  }
}

# Create subnets in different availability zones for EKS
resource "aws_subnet" "eks_subnets" {
  count         = 3
  vpc_id        = aws_vpc.eks_vpc.id
  availability_zone = element(["us-east-1a", "us-east-1b", "us-east-1c"], count.index)
  cidr_block    = cidrsubnet(aws_vpc.eks_vpc.cidr_block, 8, count.index)
}

# Configure the EKS cluster with Auto Scaling and failover mechanisms
# Ensure Kubernetes is set up to launch pods in multiple AZs and handle pod failures.

# Define an Amazon RDS instance with Multi-AZ deployment
resource "aws_db_instance" "rds_instance" {
  allocated_storage    = 20
  storage_type         = "gp2"
  engine               = "mysql"
  engine_version       = "5.7"
  instance_class       = "db.t2.micro"
  name                 = "my-rds"
  username             = "admin"
  password             = "your_password"
  multi_az             = true  # Multi-AZ deployment

  # Specify the subnets in different AZs for Multi-AZ
  subnet_group_name = "mydb-subnet-group"
  vpc_security_group_ids = [aws_security_group.rds_sg.id]
}

# Create an Amazon S3 bucket for data storage
resource "aws_s3_bucket" "data_bucket" {
  bucket = "my-data-bucket"
  acl    = "private"
  versioning {
    enabled = true
  }
}

# Define an Amazon RDS read replica for high availability
resource "aws_db_instance" "rds_read_replica" {
  count            = 1  # A single replica for failover
  allocated_storage = 20
  storage_type      = "gp2"
  engine            = "mysql"
  engine_version    = "5.7"
  instance_class    = "db.t2.micro"
  name              = "my-rds-read-replica"
  username          = "admin"
  password          = "your_password"
  multi_az          = false  # Not Multi-AZ

  # Specify the subnet in a different AZ
  subnet_group_name = "mydb-subnet-group"
  vpc_security_group_ids = [aws_security_group.rds_sg.id]
}

# Create a security group for RDS
resource "aws_security_group" "rds_sg" {
  name_prefix = "rds-sg-"
  vpc_id      = aws_vpc.eks_vpc.id

  # Define inbound and outbound rules as needed
}

# Configure Amazon Route 53 to route traffic to EKS
resource "aws_route53_record" "eks_dns" {
  zone_id = aws_route53_zone.example_zone.zone_id
  name    = "eks.example.com"
  type    = "A"
  alias {
    name                   = module.eks_cluster.cluster_endpoint
    evaluate_target_health = true
    zone_id                = module.eks_cluster.cluster_hosted_zone_id
  }
}

# Define the EKS Application Load Balancer (ALB) to distribute traffic
# Ensure ALB is properly configured with listeners and target groups.
