data "aws_iam_policy_document" "aws_managed_policies" {
  source_json = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action   = "sts:AssumeRole",
        Effect   = "Allow",
        Principal = {
          Service = "ec2.amazonaws.com"
        }
      }
    ]
  })
}

# Defined policies managed by the client
data "aws_iam_policy_document" "client_managed_policies" {
  source_json = jsonencode({
    Version = "2012-10-17",
    Statement = [
      # Define policies managed by the client
    ]
  })
}

# Define the roles managed by the client
resource "aws_iam_role" "client_managed_roles" {
  name = "DeveloperRole"
  assume_role_policy = data.aws_iam_policy_document.aws_managed_policies.json

  # Attach client-managed policies to the role
  inline_policy {
    name = "PipelinePolicy"
    policy = data.aws_iam_policy_document.client_managed_policies.json
  }

}

# Create an IAM user for static credentials (PipelineUser)
resource "aws_iam_user" "pipeline_user" {
  name = "PipelineUser"
}

# Attach a managed policy to the PipelineUser
resource "aws_iam_user_policy_attachment" "pipeline_user_attachment" {
  user       = aws_iam_user.pipeline_user.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonS3FullAccess" # Adjust to your requirements
}

# Define an IAM policy for read-only access
resource "aws_iam_policy" "readonly_policy" {
  name        = "ReadOnlyAccessPolicy"
  description = "Allows read-only access to AWS resources"
  
  # Define the policy document here to grant read-only access
}

# Attach the ReadOnlyAccess policy to the ReadOnlyRole
resource "aws_iam_role_policy_attachment" "readonly_role_attachment" {
  policy_arn = aws_iam_policy.readonly_policy.arn
  role       = aws_iam_role.client_managed_roles.name
}

# Create an SSM Parameter for storing application credentials
resource "aws_ssm_parameter" "app_credentials" {
  name  = "/app/credentials"
  type  = "SecureString" # Ensure proper encryption
  value = "application_credentials"
}

# Define an AWS Secrets Manager secret for database access
resource "aws_secretsmanager_secret" "db_secrets" {
  name = "DatabaseSecret"
}

# Configure rotation for the database secret
resource "aws_secretsmanager_secret_rotation" "db_secrets_rotation" {
  secret_id = aws_secretsmanager_secret.db_secrets.id
  rotation_lambda_arn = "rotation_lambda_arn" # Replace with the actual Lambda ARN for rotation
  rotation_rules = "automatic"
  rotation_days = 30
}
