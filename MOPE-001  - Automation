# Set up AWS provider configuration
provider "aws" {
  region = "eu-west-1" 
}


resource "aws_s3_bucket" "terraform_state" {
  bucket = "your-terraform-state-bucket"
  acl    = "private"
}


resource "aws_dynamodb_table" "terraform_lock" {
  name           = "terraform_lock"
  read_capacity  = 5
  write_capacity = 5
  hash_key       = "LockID"

  attribute {
    name = "LockID"
    type = "S"
  }
}


resource "aws_vpc" "eks_vpc" {
  cidr_block = "10.0.0.0/16"
  enable_dns_support = true
  enable_dns_hostnames = true
  tags = {
    Name = "eks-vpc"
  }
}

resource "aws_subnet" "eks_subnet" {
  count = 2
  vpc_id = aws_vpc.eks_vpc.id
  cidr_block = cidrsubnet(aws_vpc.eks_vpc.cidr_block, 8, count.index)
  availability_zone = element(["us-east-1a", "us-east-1b"], count.index)
  tags = {
    Name = "eks-subnet-${count.index}"
  }
}

# Create an ECR repository for Docker images
resource "aws_ecr_repository" "my_app" {
  name = "my-app"
}

# Define IAM roles and policies for EKS
# ... (define your IAM roles and policies for EKS here)

# Create the EKS cluster
module "eks" {
  source = "terraform-aws-modules/eks/aws"
  cluster_name = "my-cluster"
  cluster_version = "1.20"
  subnets = aws_subnet.eks_subnet[*].id
  vpc_id = aws_vpc.eks_vpc.id
  write_kubeconfig = true

  tags = {
    Terraform   = "true"
    Environment = "dev"
  }
}

# Output the kubeconfig to a file
output "kubeconfig" {
  value = module.eks.kubeconfig
  sensitive = true
}

